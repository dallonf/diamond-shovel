var Resource = require('deployd/lib/resource')
  , util = require('util')
  , path = require('path')
  , fs = require('fs')
  , Q = require('q');

function SinglePageApp(options) {
  Resource.apply(this, arguments);
  this.path = "/";
  this.templatesDir = this.config.templatesDir || "./templates";
}

util.inherits(SinglePageApp, Resource);
module.exports = SinglePageApp;

SinglePageApp.prototype.load = function(fn) {
  var resource = this
    , _err;

  var error = function(err) {
    _err = err;
    fn(err);
  };

  var done = function(err) {
    if (err) return error(err);
    if (!_err && resource.events && (resource.indexCache || resource.noCache)) {
      fn();
    }
  };

  try {
    Resource.prototype.load.call(resource, done);
  } catch (ex) {
    return error(ex);
  }

  if (this.options.server.options.env === 'development' && this.config.onlyDevelopment) {
    SinglePageApp.loadTemplates(resource.templatesDir, function(err, index) {
      resource.indexCache = index;
      done(err);
    });
  } else {
    process.nextTick(function() {
      resource.noCache = true;
      done();
    }, 1);
    
  }
  

  // fs.readFile('./public/index.html', 'utf-8', function(err, indexFile) {
  //   if (err) return error(err);

  //   fs.readdir(resource.templatesDir, function(err, dir) {
  //     if (err) {
  //       resource.indexCache = indexFile;
  //       return done();
  //     }
  //     var remaining = dir.length
  //       , templates = {};
  //     var doneLoadingTemplates = function() {
  //       remaining--;
  //       if (!_err && remaining <= 0) {
  //         var templateBlock = "";
  //         Object.keys(templates).forEach(function(t) {
  //           templateBlock += '<script type="text/html" id="' + t + '-template">\n';
  //           templateBlock += templates[t] + '\n';
  //           templateBlock += '</script>\n\n';
  //         });
  //         resource.indexCache = indexFile.replace('<!-- TEMPLATES -->', templateBlock);
  //         done();
  //       }
  //     };


  //     if (remaining === 0) return doneLoadingTemplates();
  //     dir.forEach(function(t) {
  //       fs.readFile(path.join(resource.templatesDir, t), 'utf-8', function(err, file) {
  //         if (err) return error(err);
  //         templates[path.basename(t, '.html')] = file;
  //         doneLoadingTemplates();
  //       });
  //     });
  //   });
  // });
};

SinglePageApp.loadTemplates = function(templatesDir, fn) {
  var dirQ = Q.ninvoke(fs, 'readdir', templatesDir);
  var indexFileQ = Q.ninvoke(fs, 'readFile', './public/index.html', 'utf-8');
  var templateFileQs = dirQ.then(function(dir) {
    return dir.map(function(t) {
      return Q.ninvoke(fs, 'readFile', path.join(templatesDir, t)).then(function(file) {
        return {
          name: path.basename(t, '.html'),
          file: file
        };
      });
    });
  });
  var indexQ = Q.spread([Q.all(templateFileQs), indexFileQ], function(templateFiles, indexFile) {
    var templateBlock = "";
    templateFiles.forEach(function(t) {
      templateBlock += '<script type="text/html" id="' + t.name + '-template">\n';
      templateBlock += t.file + '\n';
      templateBlock += '</script>\n\n';
    });
    return indexFile.replace('<!-- TEMPLATES -->', templateBlock);
  });

  indexQ.then(function(index) {
    fn(null, index);
  }, function(err) {
    fn(err);
  });
};

SinglePageApp.prototype.handle = function (ctx, next) {
  if (ctx.method !== 'GET' || ctx.res.internal) return next();
  if (this.noCache) return next();
  if (ctx.url === '/' || ctx.url === '/index.html') {
    ctx.res.end(this.indexCache);
  } else {
    next();
  }
};
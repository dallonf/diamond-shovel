var Resource = require('deployd/lib/resource')
  , util = require('util')
  , path = require('path')
  , fs = require('fs');

function SinglePageApp(options) {
  Resource.apply(this, arguments);
  this.path = "/";
  this.templatesDir = this.config.templatesDir || "./templates";
  console.log("Loading SinglePageApp");
}

util.inherits(SinglePageApp, Resource);
module.exports = SinglePageApp;

SinglePageApp.prototype.load = function(fn) {
  console.log("Loading");
  var resource = this
    , _err;

  var error = function(err) {
    _err = err;
    fn(err);
  };

  var done = function(err) {
    if (err) return error(err);
    if (!_err && resource.events && resource.indexCache) {
      fn();
    }
  };


  try {
    Resource.prototype.load.call(resource, done);  
  } catch (ex) {
    return error(ex);
  }

  fs.readFile('./public/index.html', 'utf-8', function(err, indexFile) {
    if (err) return error(err);

    console.log("Read file");

    fs.readdir(resource.templatesDir, function(err, dir) {
      if (err) {
        console.log(err);
        resource.indexCache = indexFile;
        return done();
      } 
      var remaining = dir.length
        , templates = {};
      var doneLoadingTemplates = function() {
        remaining--;
        if (!_err && remaining <= 0) {
          console.log("Done loading templates");
          var templateBlock = "";
          Object.keys(templates).forEach(function(t) {
            templateBlock += '<script type="text/html" id="' + t + '-template">\n';
            templateBlock += templates[t] + '\n';
            templateBlock += '</script>\n\n';
          });
          console.log("Created template block");
          if (indexFile.indexOf('<!-- TEMPLATES -->') > -1) console.log("Found template tag");
          resource.indexCache = indexFile.replace('<!-- TEMPLATES -->', templateBlock);
          done();
        }
      };

      console.log("Reading dir");

      if (remaining === 0) return doneLoadingTemplates();
      dir.forEach(function(t) {
        console.log("Reading", t);
        fs.readFile(path.join(resource.templatesDir, t), 'utf-8', function(err, file) {
          if (err) return error(err);
          templates[path.basename(t, '.html')] = file;
          doneLoadingTemplates();
        });
      });
    });
  });
};

SinglePageApp.prototype.handle = function (ctx, next) {
  if (ctx.method !== 'GET' || ctx.res.internal) return next();
  if (ctx.url === '/' || ctx.url === '/index.html') {
    ctx.res.end(this.indexCache);  
  } else {
    next();
  }

  
}